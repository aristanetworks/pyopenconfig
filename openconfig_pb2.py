# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: openconfig.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from google.protobuf import any_pb2 as google_dot_protobuf_dot_any__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='openconfig.proto',
  package='openconfig',
  syntax='proto3',
  serialized_pb=_b('\n\x10openconfig.proto\x12\nopenconfig\x1a\x19google/protobuf/any.proto\"\x17\n\x04Path\x12\x0f\n\x07\x65lement\x18\x01 \x03(\t\"D\n\x05Value\x12\r\n\x05value\x18\x01 \x01(\x0c\x12\x1e\n\x04type\x18\x02 \x01(\x0e\x32\x10.openconfig.Type\x12\x0c\n\x04name\x18\x03 \x01(\t\"J\n\x06Update\x12\x1e\n\x04path\x18\x01 \x01(\x0b\x32\x10.openconfig.Path\x12 \n\x05value\x18\x02 \x01(\x0b\x32\x11.openconfig.Value\"\x98\x01\n\x0cNotification\x12\x11\n\ttimestamp\x18\x01 \x01(\x03\x12 \n\x06prefix\x18\x02 \x01(\x0b\x32\x10.openconfig.Path\x12\r\n\x05\x61lias\x18\x03 \x01(\t\x12\"\n\x06update\x18\x04 \x03(\x0b\x32\x12.openconfig.Update\x12 \n\x06\x64\x65lete\x18\x05 \x03(\x0b\x32\x10.openconfig.Path\"\x8f\x01\n\nUDPWrapper\x12\x1c\n\x02id\x18\x01 \x01(\x0b\x32\x10.openconfig.Path\x12\x1a\n\x12transmit_timestamp\x18\x02 \x01(\x04\x12\x17\n\x0fsequence_number\x18\x03 \x01(\x04\x12.\n\x0cnotification\x18\x04 \x03(\x0b\x32\x18.openconfig.Notification\"J\n\x05\x45rror\x12\x0c\n\x04\x63ode\x18\x01 \x01(\r\x12\x0f\n\x07message\x18\x02 \x01(\t\x12\"\n\x04\x64\x61ta\x18\x03 \x01(\x0b\x32\x14.google.protobuf.Any\"\xde\x01\n\x10SubscribeRequest\x12\x31\n\tsubscribe\x18\x01 \x01(\x0b\x32\x1c.openconfig.SubscriptionListH\x00\x12*\n\theartbeat\x18\x02 \x01(\x0b\x32\x15.openconfig.HeartbeatH\x00\x12\'\n\x04sync\x18\x03 \x01(\x0b\x32\x17.openconfig.SyncRequestH\x00\x12(\n\x07\x61liases\x18\x04 \x01(\x0b\x32\x15.openconfig.AliasListH\x00\x12\r\n\x05proxy\x18\x05 \x03(\tB\t\n\x07request\"\x90\x01\n\x11SubscribeResponse\x12*\n\x06update\x18\x01 \x01(\x0b\x32\x18.openconfig.NotificationH\x00\x12*\n\theartbeat\x18\x02 \x01(\x0b\x32\x15.openconfig.HeartbeatH\x00\x12\x17\n\rsync_response\x18\x03 \x01(\x04H\x00\x42\n\n\x08response\"\xec\x01\n\x10SubscriptionList\x12\x0e\n\x04once\x18\n \x01(\x08H\x00\x12\x17\n\rpoll_interval\x18\x0b \x01(\x04H\x00\x12.\n\x0csubscription\x18\x01 \x03(\x0b\x32\x18.openconfig.Subscription\x12 \n\x06prefix\x18\x02 \x01(\x0b\x32\x10.openconfig.Path\x12\x35\n\x07options\x18\x03 \x01(\x0b\x32$.openconfig.SubscriptionList.Options\x1a\x1e\n\x07Options\x12\x13\n\x0buse_aliases\x18\x01 \x01(\x08\x42\x06\n\x04mode\"I\n\x0cSubscription\x12\x1e\n\x04path\x18\x01 \x01(\x0b\x32\x10.openconfig.Path\x12\x19\n\x11\x63oalesce_interval\x18\x02 \x01(\x04\"-\n\tAliasList\x12 \n\x05\x61lias\x18\x01 \x03(\x0b\x32\x11.openconfig.Alias\"H\n\x05\x41lias\x12\x1e\n\x04path\x18\x01 \x01(\x0b\x32\x10.openconfig.Path\x12\x1f\n\x05\x61lias\x18\x02 \x01(\x0b\x32\x10.openconfig.Path\"\x1d\n\tHeartbeat\x12\x10\n\x08interval\x18\x01 \x01(\x04\"[\n\x0bSyncRequest\x12\n\n\x02id\x18\x01 \x01(\x04\x12 \n\x06prefix\x18\x02 \x01(\x0b\x32\x10.openconfig.Path\x12\x1e\n\x04path\x18\x03 \x03(\x0b\x32\x10.openconfig.Path\"f\n\nGetRequest\x12 \n\x06prefix\x18\x01 \x01(\x0b\x32\x10.openconfig.Path\x12\x1e\n\x04path\x18\x02 \x03(\x0b\x32\x10.openconfig.Path\x12\x16\n\x0e\x63\x61\x63he_interval\x18\x03 \x01(\x03\"=\n\x0bGetResponse\x12.\n\x0cnotification\x18\x01 \x03(\x0b\x32\x18.openconfig.Notification\"t\n\nSetRequest\x12 \n\x06prefix\x18\x01 \x01(\x0b\x32\x10.openconfig.Path\x12 \n\x06\x64\x65lete\x18\x02 \x03(\x0b\x32\x10.openconfig.Path\x12\"\n\x06update\x18\x03 \x03(\x0b\x32\x12.openconfig.Update\"]\n\x0bSetResponse\x12 \n\x06prefix\x18\x01 \x01(\x0b\x32\x10.openconfig.Path\x12,\n\x08response\x18\x02 \x03(\x0b\x32\x1a.openconfig.UpdateResponse\"e\n\x0eUpdateResponse\x12\x1e\n\x04path\x18\x01 \x01(\x0b\x32\x10.openconfig.Path\x12 \n\x05\x65rror\x18\x02 \x01(\x0b\x32\x11.openconfig.Error\x12\x11\n\ttimestamp\x18\x03 \x01(\x03*\x1b\n\x04Type\x12\x08\n\x04JSON\x10\x00\x12\t\n\x05\x42YTES\x10\x01\x32\xce\x01\n\nOpenConfig\x12L\n\tSubscribe\x12\x1c.openconfig.SubscribeRequest\x1a\x1d.openconfig.SubscribeResponse(\x01\x30\x01\x12\x36\n\x03Get\x12\x16.openconfig.GetRequest\x1a\x17.openconfig.GetResponse\x12:\n\x03Set\x12\x16.openconfig.SetRequest\x1a\x17.openconfig.SetResponse(\x01\x30\x01\x62\x06proto3')
  ,
  dependencies=[google_dot_protobuf_dot_any__pb2.DESCRIPTOR,])
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='openconfig.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='JSON', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='BYTES', index=1, number=1,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=2021,
  serialized_end=2048,
)
_sym_db.RegisterEnumDescriptor(_TYPE)

Type = enum_type_wrapper.EnumTypeWrapper(_TYPE)
JSON = 0
BYTES = 1



_PATH = _descriptor.Descriptor(
  name='Path',
  full_name='openconfig.Path',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='element', full_name='openconfig.Path.element', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=59,
  serialized_end=82,
)


_VALUE = _descriptor.Descriptor(
  name='Value',
  full_name='openconfig.Value',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='openconfig.Value.value', index=0,
      number=1, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='type', full_name='openconfig.Value.type', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='name', full_name='openconfig.Value.name', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=84,
  serialized_end=152,
)


_UPDATE = _descriptor.Descriptor(
  name='Update',
  full_name='openconfig.Update',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.Update.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='value', full_name='openconfig.Update.value', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=154,
  serialized_end=228,
)


_NOTIFICATION = _descriptor.Descriptor(
  name='Notification',
  full_name='openconfig.Notification',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='openconfig.Notification.timestamp', index=0,
      number=1, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prefix', full_name='openconfig.Notification.prefix', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='alias', full_name='openconfig.Notification.alias', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='update', full_name='openconfig.Notification.update', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='delete', full_name='openconfig.Notification.delete', index=4,
      number=5, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=231,
  serialized_end=383,
)


_UDPWRAPPER = _descriptor.Descriptor(
  name='UDPWrapper',
  full_name='openconfig.UDPWrapper',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='openconfig.UDPWrapper.id', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='transmit_timestamp', full_name='openconfig.UDPWrapper.transmit_timestamp', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sequence_number', full_name='openconfig.UDPWrapper.sequence_number', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='notification', full_name='openconfig.UDPWrapper.notification', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=386,
  serialized_end=529,
)


_ERROR = _descriptor.Descriptor(
  name='Error',
  full_name='openconfig.Error',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='code', full_name='openconfig.Error.code', index=0,
      number=1, type=13, cpp_type=3, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='message', full_name='openconfig.Error.message', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='data', full_name='openconfig.Error.data', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=531,
  serialized_end=605,
)


_SUBSCRIBEREQUEST = _descriptor.Descriptor(
  name='SubscribeRequest',
  full_name='openconfig.SubscribeRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='subscribe', full_name='openconfig.SubscribeRequest.subscribe', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='heartbeat', full_name='openconfig.SubscribeRequest.heartbeat', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sync', full_name='openconfig.SubscribeRequest.sync', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='aliases', full_name='openconfig.SubscribeRequest.aliases', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='proxy', full_name='openconfig.SubscribeRequest.proxy', index=4,
      number=5, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='request', full_name='openconfig.SubscribeRequest.request',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=608,
  serialized_end=830,
)


_SUBSCRIBERESPONSE = _descriptor.Descriptor(
  name='SubscribeResponse',
  full_name='openconfig.SubscribeResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='update', full_name='openconfig.SubscribeResponse.update', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='heartbeat', full_name='openconfig.SubscribeResponse.heartbeat', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='sync_response', full_name='openconfig.SubscribeResponse.sync_response', index=2,
      number=3, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='response', full_name='openconfig.SubscribeResponse.response',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=833,
  serialized_end=977,
)


_SUBSCRIPTIONLIST_OPTIONS = _descriptor.Descriptor(
  name='Options',
  full_name='openconfig.SubscriptionList.Options',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='use_aliases', full_name='openconfig.SubscriptionList.Options.use_aliases', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1178,
  serialized_end=1208,
)

_SUBSCRIPTIONLIST = _descriptor.Descriptor(
  name='SubscriptionList',
  full_name='openconfig.SubscriptionList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='once', full_name='openconfig.SubscriptionList.once', index=0,
      number=10, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='poll_interval', full_name='openconfig.SubscriptionList.poll_interval', index=1,
      number=11, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='subscription', full_name='openconfig.SubscriptionList.subscription', index=2,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prefix', full_name='openconfig.SubscriptionList.prefix', index=3,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='options', full_name='openconfig.SubscriptionList.options', index=4,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_SUBSCRIPTIONLIST_OPTIONS, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='mode', full_name='openconfig.SubscriptionList.mode',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=980,
  serialized_end=1216,
)


_SUBSCRIPTION = _descriptor.Descriptor(
  name='Subscription',
  full_name='openconfig.Subscription',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.Subscription.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='coalesce_interval', full_name='openconfig.Subscription.coalesce_interval', index=1,
      number=2, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1218,
  serialized_end=1291,
)


_ALIASLIST = _descriptor.Descriptor(
  name='AliasList',
  full_name='openconfig.AliasList',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='alias', full_name='openconfig.AliasList.alias', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1293,
  serialized_end=1338,
)


_ALIAS = _descriptor.Descriptor(
  name='Alias',
  full_name='openconfig.Alias',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.Alias.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='alias', full_name='openconfig.Alias.alias', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1340,
  serialized_end=1412,
)


_HEARTBEAT = _descriptor.Descriptor(
  name='Heartbeat',
  full_name='openconfig.Heartbeat',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='interval', full_name='openconfig.Heartbeat.interval', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1414,
  serialized_end=1443,
)


_SYNCREQUEST = _descriptor.Descriptor(
  name='SyncRequest',
  full_name='openconfig.SyncRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='openconfig.SyncRequest.id', index=0,
      number=1, type=4, cpp_type=4, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='prefix', full_name='openconfig.SyncRequest.prefix', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.SyncRequest.path', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1445,
  serialized_end=1536,
)


_GETREQUEST = _descriptor.Descriptor(
  name='GetRequest',
  full_name='openconfig.GetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='prefix', full_name='openconfig.GetRequest.prefix', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.GetRequest.path', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cache_interval', full_name='openconfig.GetRequest.cache_interval', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1538,
  serialized_end=1640,
)


_GETRESPONSE = _descriptor.Descriptor(
  name='GetResponse',
  full_name='openconfig.GetResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='notification', full_name='openconfig.GetResponse.notification', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1642,
  serialized_end=1703,
)


_SETREQUEST = _descriptor.Descriptor(
  name='SetRequest',
  full_name='openconfig.SetRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='prefix', full_name='openconfig.SetRequest.prefix', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='delete', full_name='openconfig.SetRequest.delete', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='update', full_name='openconfig.SetRequest.update', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1705,
  serialized_end=1821,
)


_SETRESPONSE = _descriptor.Descriptor(
  name='SetResponse',
  full_name='openconfig.SetResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='prefix', full_name='openconfig.SetResponse.prefix', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response', full_name='openconfig.SetResponse.response', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1823,
  serialized_end=1916,
)


_UPDATERESPONSE = _descriptor.Descriptor(
  name='UpdateResponse',
  full_name='openconfig.UpdateResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='path', full_name='openconfig.UpdateResponse.path', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='error', full_name='openconfig.UpdateResponse.error', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='timestamp', full_name='openconfig.UpdateResponse.timestamp', index=2,
      number=3, type=3, cpp_type=2, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1918,
  serialized_end=2019,
)

_VALUE.fields_by_name['type'].enum_type = _TYPE
_UPDATE.fields_by_name['path'].message_type = _PATH
_UPDATE.fields_by_name['value'].message_type = _VALUE
_NOTIFICATION.fields_by_name['prefix'].message_type = _PATH
_NOTIFICATION.fields_by_name['update'].message_type = _UPDATE
_NOTIFICATION.fields_by_name['delete'].message_type = _PATH
_UDPWRAPPER.fields_by_name['id'].message_type = _PATH
_UDPWRAPPER.fields_by_name['notification'].message_type = _NOTIFICATION
_ERROR.fields_by_name['data'].message_type = google_dot_protobuf_dot_any__pb2._ANY
_SUBSCRIBEREQUEST.fields_by_name['subscribe'].message_type = _SUBSCRIPTIONLIST
_SUBSCRIBEREQUEST.fields_by_name['heartbeat'].message_type = _HEARTBEAT
_SUBSCRIBEREQUEST.fields_by_name['sync'].message_type = _SYNCREQUEST
_SUBSCRIBEREQUEST.fields_by_name['aliases'].message_type = _ALIASLIST
_SUBSCRIBEREQUEST.oneofs_by_name['request'].fields.append(
  _SUBSCRIBEREQUEST.fields_by_name['subscribe'])
_SUBSCRIBEREQUEST.fields_by_name['subscribe'].containing_oneof = _SUBSCRIBEREQUEST.oneofs_by_name['request']
_SUBSCRIBEREQUEST.oneofs_by_name['request'].fields.append(
  _SUBSCRIBEREQUEST.fields_by_name['heartbeat'])
_SUBSCRIBEREQUEST.fields_by_name['heartbeat'].containing_oneof = _SUBSCRIBEREQUEST.oneofs_by_name['request']
_SUBSCRIBEREQUEST.oneofs_by_name['request'].fields.append(
  _SUBSCRIBEREQUEST.fields_by_name['sync'])
_SUBSCRIBEREQUEST.fields_by_name['sync'].containing_oneof = _SUBSCRIBEREQUEST.oneofs_by_name['request']
_SUBSCRIBEREQUEST.oneofs_by_name['request'].fields.append(
  _SUBSCRIBEREQUEST.fields_by_name['aliases'])
_SUBSCRIBEREQUEST.fields_by_name['aliases'].containing_oneof = _SUBSCRIBEREQUEST.oneofs_by_name['request']
_SUBSCRIBERESPONSE.fields_by_name['update'].message_type = _NOTIFICATION
_SUBSCRIBERESPONSE.fields_by_name['heartbeat'].message_type = _HEARTBEAT
_SUBSCRIBERESPONSE.oneofs_by_name['response'].fields.append(
  _SUBSCRIBERESPONSE.fields_by_name['update'])
_SUBSCRIBERESPONSE.fields_by_name['update'].containing_oneof = _SUBSCRIBERESPONSE.oneofs_by_name['response']
_SUBSCRIBERESPONSE.oneofs_by_name['response'].fields.append(
  _SUBSCRIBERESPONSE.fields_by_name['heartbeat'])
_SUBSCRIBERESPONSE.fields_by_name['heartbeat'].containing_oneof = _SUBSCRIBERESPONSE.oneofs_by_name['response']
_SUBSCRIBERESPONSE.oneofs_by_name['response'].fields.append(
  _SUBSCRIBERESPONSE.fields_by_name['sync_response'])
_SUBSCRIBERESPONSE.fields_by_name['sync_response'].containing_oneof = _SUBSCRIBERESPONSE.oneofs_by_name['response']
_SUBSCRIPTIONLIST_OPTIONS.containing_type = _SUBSCRIPTIONLIST
_SUBSCRIPTIONLIST.fields_by_name['subscription'].message_type = _SUBSCRIPTION
_SUBSCRIPTIONLIST.fields_by_name['prefix'].message_type = _PATH
_SUBSCRIPTIONLIST.fields_by_name['options'].message_type = _SUBSCRIPTIONLIST_OPTIONS
_SUBSCRIPTIONLIST.oneofs_by_name['mode'].fields.append(
  _SUBSCRIPTIONLIST.fields_by_name['once'])
_SUBSCRIPTIONLIST.fields_by_name['once'].containing_oneof = _SUBSCRIPTIONLIST.oneofs_by_name['mode']
_SUBSCRIPTIONLIST.oneofs_by_name['mode'].fields.append(
  _SUBSCRIPTIONLIST.fields_by_name['poll_interval'])
_SUBSCRIPTIONLIST.fields_by_name['poll_interval'].containing_oneof = _SUBSCRIPTIONLIST.oneofs_by_name['mode']
_SUBSCRIPTION.fields_by_name['path'].message_type = _PATH
_ALIASLIST.fields_by_name['alias'].message_type = _ALIAS
_ALIAS.fields_by_name['path'].message_type = _PATH
_ALIAS.fields_by_name['alias'].message_type = _PATH
_SYNCREQUEST.fields_by_name['prefix'].message_type = _PATH
_SYNCREQUEST.fields_by_name['path'].message_type = _PATH
_GETREQUEST.fields_by_name['prefix'].message_type = _PATH
_GETREQUEST.fields_by_name['path'].message_type = _PATH
_GETRESPONSE.fields_by_name['notification'].message_type = _NOTIFICATION
_SETREQUEST.fields_by_name['prefix'].message_type = _PATH
_SETREQUEST.fields_by_name['delete'].message_type = _PATH
_SETREQUEST.fields_by_name['update'].message_type = _UPDATE
_SETRESPONSE.fields_by_name['prefix'].message_type = _PATH
_SETRESPONSE.fields_by_name['response'].message_type = _UPDATERESPONSE
_UPDATERESPONSE.fields_by_name['path'].message_type = _PATH
_UPDATERESPONSE.fields_by_name['error'].message_type = _ERROR
DESCRIPTOR.message_types_by_name['Path'] = _PATH
DESCRIPTOR.message_types_by_name['Value'] = _VALUE
DESCRIPTOR.message_types_by_name['Update'] = _UPDATE
DESCRIPTOR.message_types_by_name['Notification'] = _NOTIFICATION
DESCRIPTOR.message_types_by_name['UDPWrapper'] = _UDPWRAPPER
DESCRIPTOR.message_types_by_name['Error'] = _ERROR
DESCRIPTOR.message_types_by_name['SubscribeRequest'] = _SUBSCRIBEREQUEST
DESCRIPTOR.message_types_by_name['SubscribeResponse'] = _SUBSCRIBERESPONSE
DESCRIPTOR.message_types_by_name['SubscriptionList'] = _SUBSCRIPTIONLIST
DESCRIPTOR.message_types_by_name['Subscription'] = _SUBSCRIPTION
DESCRIPTOR.message_types_by_name['AliasList'] = _ALIASLIST
DESCRIPTOR.message_types_by_name['Alias'] = _ALIAS
DESCRIPTOR.message_types_by_name['Heartbeat'] = _HEARTBEAT
DESCRIPTOR.message_types_by_name['SyncRequest'] = _SYNCREQUEST
DESCRIPTOR.message_types_by_name['GetRequest'] = _GETREQUEST
DESCRIPTOR.message_types_by_name['GetResponse'] = _GETRESPONSE
DESCRIPTOR.message_types_by_name['SetRequest'] = _SETREQUEST
DESCRIPTOR.message_types_by_name['SetResponse'] = _SETRESPONSE
DESCRIPTOR.message_types_by_name['UpdateResponse'] = _UPDATERESPONSE
DESCRIPTOR.enum_types_by_name['Type'] = _TYPE

Path = _reflection.GeneratedProtocolMessageType('Path', (_message.Message,), dict(
  DESCRIPTOR = _PATH,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Path)
  ))
_sym_db.RegisterMessage(Path)

Value = _reflection.GeneratedProtocolMessageType('Value', (_message.Message,), dict(
  DESCRIPTOR = _VALUE,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Value)
  ))
_sym_db.RegisterMessage(Value)

Update = _reflection.GeneratedProtocolMessageType('Update', (_message.Message,), dict(
  DESCRIPTOR = _UPDATE,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Update)
  ))
_sym_db.RegisterMessage(Update)

Notification = _reflection.GeneratedProtocolMessageType('Notification', (_message.Message,), dict(
  DESCRIPTOR = _NOTIFICATION,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Notification)
  ))
_sym_db.RegisterMessage(Notification)

UDPWrapper = _reflection.GeneratedProtocolMessageType('UDPWrapper', (_message.Message,), dict(
  DESCRIPTOR = _UDPWRAPPER,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.UDPWrapper)
  ))
_sym_db.RegisterMessage(UDPWrapper)

Error = _reflection.GeneratedProtocolMessageType('Error', (_message.Message,), dict(
  DESCRIPTOR = _ERROR,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Error)
  ))
_sym_db.RegisterMessage(Error)

SubscribeRequest = _reflection.GeneratedProtocolMessageType('SubscribeRequest', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIBEREQUEST,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SubscribeRequest)
  ))
_sym_db.RegisterMessage(SubscribeRequest)

SubscribeResponse = _reflection.GeneratedProtocolMessageType('SubscribeResponse', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIBERESPONSE,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SubscribeResponse)
  ))
_sym_db.RegisterMessage(SubscribeResponse)

SubscriptionList = _reflection.GeneratedProtocolMessageType('SubscriptionList', (_message.Message,), dict(

  Options = _reflection.GeneratedProtocolMessageType('Options', (_message.Message,), dict(
    DESCRIPTOR = _SUBSCRIPTIONLIST_OPTIONS,
    __module__ = 'openconfig_pb2'
    # @@protoc_insertion_point(class_scope:openconfig.SubscriptionList.Options)
    ))
  ,
  DESCRIPTOR = _SUBSCRIPTIONLIST,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SubscriptionList)
  ))
_sym_db.RegisterMessage(SubscriptionList)
_sym_db.RegisterMessage(SubscriptionList.Options)

Subscription = _reflection.GeneratedProtocolMessageType('Subscription', (_message.Message,), dict(
  DESCRIPTOR = _SUBSCRIPTION,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Subscription)
  ))
_sym_db.RegisterMessage(Subscription)

AliasList = _reflection.GeneratedProtocolMessageType('AliasList', (_message.Message,), dict(
  DESCRIPTOR = _ALIASLIST,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.AliasList)
  ))
_sym_db.RegisterMessage(AliasList)

Alias = _reflection.GeneratedProtocolMessageType('Alias', (_message.Message,), dict(
  DESCRIPTOR = _ALIAS,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Alias)
  ))
_sym_db.RegisterMessage(Alias)

Heartbeat = _reflection.GeneratedProtocolMessageType('Heartbeat', (_message.Message,), dict(
  DESCRIPTOR = _HEARTBEAT,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.Heartbeat)
  ))
_sym_db.RegisterMessage(Heartbeat)

SyncRequest = _reflection.GeneratedProtocolMessageType('SyncRequest', (_message.Message,), dict(
  DESCRIPTOR = _SYNCREQUEST,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SyncRequest)
  ))
_sym_db.RegisterMessage(SyncRequest)

GetRequest = _reflection.GeneratedProtocolMessageType('GetRequest', (_message.Message,), dict(
  DESCRIPTOR = _GETREQUEST,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetRequest)
  ))
_sym_db.RegisterMessage(GetRequest)

GetResponse = _reflection.GeneratedProtocolMessageType('GetResponse', (_message.Message,), dict(
  DESCRIPTOR = _GETRESPONSE,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.GetResponse)
  ))
_sym_db.RegisterMessage(GetResponse)

SetRequest = _reflection.GeneratedProtocolMessageType('SetRequest', (_message.Message,), dict(
  DESCRIPTOR = _SETREQUEST,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SetRequest)
  ))
_sym_db.RegisterMessage(SetRequest)

SetResponse = _reflection.GeneratedProtocolMessageType('SetResponse', (_message.Message,), dict(
  DESCRIPTOR = _SETRESPONSE,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.SetResponse)
  ))
_sym_db.RegisterMessage(SetResponse)

UpdateResponse = _reflection.GeneratedProtocolMessageType('UpdateResponse', (_message.Message,), dict(
  DESCRIPTOR = _UPDATERESPONSE,
  __module__ = 'openconfig_pb2'
  # @@protoc_insertion_point(class_scope:openconfig.UpdateResponse)
  ))
_sym_db.RegisterMessage(UpdateResponse)


import grpc
from grpc.beta import implementations as beta_implementations
from grpc.beta import interfaces as beta_interfaces
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities


class OpenConfigStub(object):

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Subscribe = channel.stream_stream(
        '/openconfig.OpenConfig/Subscribe',
        request_serializer=SubscribeRequest.SerializeToString,
        response_deserializer=SubscribeResponse.FromString,
        )
    self.Get = channel.unary_unary(
        '/openconfig.OpenConfig/Get',
        request_serializer=GetRequest.SerializeToString,
        response_deserializer=GetResponse.FromString,
        )
    self.Set = channel.stream_stream(
        '/openconfig.OpenConfig/Set',
        request_serializer=SetRequest.SerializeToString,
        response_deserializer=SetResponse.FromString,
        )


class OpenConfigServicer(object):

  def Subscribe(self, request_iterator, context):
    """Subscribe subscribes for streaming updates.  Streaming updates are provided
    as a series of Notifications, each of which update a portion of the tree.
    The target must send the current values of all subscribed paths at the
    start of the stream, followed by a sync_response of 0.

    A Subscription operates in one of three modes.

    Streaming:  This is the default mode.  The target sends continual updates
    of each value as specified by each subscription's coalesce_interval.  The
    client may request the target to resend the current value of a set of paths
    by sending a SyncRequest.

    Once: This mode is specified by setting once to true in the
    SubscriptionRequest.  The target must close the stream after sending
    the sync_response of 0.  The target should only send each value once.

    Poll: This mode is the equivalent of periodic Once requests but sent over a
    single stream.  Polling is specified by setting poll_interval in the
    SubscriptionRequest to the expected number of nanoseconds between polls.
    The target stops sending updates after sending the sync_response of 0.
    After the polling interval, the client sends a new SubscriptionRequest with
    only the poll_interval set.  The target must respond by sending the current
    values of all subscribed paths, once again followed with a sync_response of
    0.  This process then repeats until the client closes the request stream.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Get(self, request, context):
    """Get requests a single snapshot of the requested data.  A Get request may
    contain a hint that the request will be repeated (i.e., polling).  A Get is
    the equivalent of a Subscribe with once set, with the exception that all
    the key value pairs will be returned in a single response.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Set(self, request_iterator, context):
    """Set sets the paths contained in the SetRequest to the values If a path does
    not exist, or is read-only the SetResponse will return an error.  All paths
    in the SetRequest must be valid or the entire request must be rejected.  If
    a path specifies a node, rather than the leaf, then the value must be the
    values of the node's children encoded in JSON.  Binary data in the tree
    must be base64 encoded.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_OpenConfigServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Subscribe': grpc.stream_stream_rpc_method_handler(
          servicer.Subscribe,
          request_deserializer=SubscribeRequest.FromString,
          response_serializer=SubscribeResponse.SerializeToString,
      ),
      'Get': grpc.unary_unary_rpc_method_handler(
          servicer.Get,
          request_deserializer=GetRequest.FromString,
          response_serializer=GetResponse.SerializeToString,
      ),
      'Set': grpc.stream_stream_rpc_method_handler(
          servicer.Set,
          request_deserializer=SetRequest.FromString,
          response_serializer=SetResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'openconfig.OpenConfig', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class BetaOpenConfigServicer(object):
  def Subscribe(self, request_iterator, context):
    """Subscribe subscribes for streaming updates.  Streaming updates are provided
    as a series of Notifications, each of which update a portion of the tree.
    The target must send the current values of all subscribed paths at the
    start of the stream, followed by a sync_response of 0.

    A Subscription operates in one of three modes.

    Streaming:  This is the default mode.  The target sends continual updates
    of each value as specified by each subscription's coalesce_interval.  The
    client may request the target to resend the current value of a set of paths
    by sending a SyncRequest.

    Once: This mode is specified by setting once to true in the
    SubscriptionRequest.  The target must close the stream after sending
    the sync_response of 0.  The target should only send each value once.

    Poll: This mode is the equivalent of periodic Once requests but sent over a
    single stream.  Polling is specified by setting poll_interval in the
    SubscriptionRequest to the expected number of nanoseconds between polls.
    The target stops sending updates after sending the sync_response of 0.
    After the polling interval, the client sends a new SubscriptionRequest with
    only the poll_interval set.  The target must respond by sending the current
    values of all subscribed paths, once again followed with a sync_response of
    0.  This process then repeats until the client closes the request stream.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Get(self, request, context):
    """Get requests a single snapshot of the requested data.  A Get request may
    contain a hint that the request will be repeated (i.e., polling).  A Get is
    the equivalent of a Subscribe with once set, with the exception that all
    the key value pairs will be returned in a single response.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
  def Set(self, request_iterator, context):
    """Set sets the paths contained in the SetRequest to the values If a path does
    not exist, or is read-only the SetResponse will return an error.  All paths
    in the SetRequest must be valid or the entire request must be rejected.  If
    a path specifies a node, rather than the leaf, then the value must be the
    values of the node's children encoded in JSON.  Binary data in the tree
    must be base64 encoded.
    """
    context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


class BetaOpenConfigStub(object):
  def Subscribe(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    """Subscribe subscribes for streaming updates.  Streaming updates are provided
    as a series of Notifications, each of which update a portion of the tree.
    The target must send the current values of all subscribed paths at the
    start of the stream, followed by a sync_response of 0.

    A Subscription operates in one of three modes.

    Streaming:  This is the default mode.  The target sends continual updates
    of each value as specified by each subscription's coalesce_interval.  The
    client may request the target to resend the current value of a set of paths
    by sending a SyncRequest.

    Once: This mode is specified by setting once to true in the
    SubscriptionRequest.  The target must close the stream after sending
    the sync_response of 0.  The target should only send each value once.

    Poll: This mode is the equivalent of periodic Once requests but sent over a
    single stream.  Polling is specified by setting poll_interval in the
    SubscriptionRequest to the expected number of nanoseconds between polls.
    The target stops sending updates after sending the sync_response of 0.
    After the polling interval, the client sends a new SubscriptionRequest with
    only the poll_interval set.  The target must respond by sending the current
    values of all subscribed paths, once again followed with a sync_response of
    0.  This process then repeats until the client closes the request stream.
    """
    raise NotImplementedError()
  def Get(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
    """Get requests a single snapshot of the requested data.  A Get request may
    contain a hint that the request will be repeated (i.e., polling).  A Get is
    the equivalent of a Subscribe with once set, with the exception that all
    the key value pairs will be returned in a single response.
    """
    raise NotImplementedError()
  Get.future = None
  def Set(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
    """Set sets the paths contained in the SetRequest to the values If a path does
    not exist, or is read-only the SetResponse will return an error.  All paths
    in the SetRequest must be valid or the entire request must be rejected.  If
    a path specifies a node, rather than the leaf, then the value must be the
    values of the node's children encoded in JSON.  Binary data in the tree
    must be base64 encoded.
    """
    raise NotImplementedError()


def beta_create_OpenConfig_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  request_deserializers = {
    ('openconfig.OpenConfig', 'Get'): GetRequest.FromString,
    ('openconfig.OpenConfig', 'Set'): SetRequest.FromString,
    ('openconfig.OpenConfig', 'Subscribe'): SubscribeRequest.FromString,
  }
  response_serializers = {
    ('openconfig.OpenConfig', 'Get'): GetResponse.SerializeToString,
    ('openconfig.OpenConfig', 'Set'): SetResponse.SerializeToString,
    ('openconfig.OpenConfig', 'Subscribe'): SubscribeResponse.SerializeToString,
  }
  method_implementations = {
    ('openconfig.OpenConfig', 'Get'): face_utilities.unary_unary_inline(servicer.Get),
    ('openconfig.OpenConfig', 'Set'): face_utilities.stream_stream_inline(servicer.Set),
    ('openconfig.OpenConfig', 'Subscribe'): face_utilities.stream_stream_inline(servicer.Subscribe),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)


def beta_create_OpenConfig_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  request_serializers = {
    ('openconfig.OpenConfig', 'Get'): GetRequest.SerializeToString,
    ('openconfig.OpenConfig', 'Set'): SetRequest.SerializeToString,
    ('openconfig.OpenConfig', 'Subscribe'): SubscribeRequest.SerializeToString,
  }
  response_deserializers = {
    ('openconfig.OpenConfig', 'Get'): GetResponse.FromString,
    ('openconfig.OpenConfig', 'Set'): SetResponse.FromString,
    ('openconfig.OpenConfig', 'Subscribe'): SubscribeResponse.FromString,
  }
  cardinalities = {
    'Get': cardinality.Cardinality.UNARY_UNARY,
    'Set': cardinality.Cardinality.STREAM_STREAM,
    'Subscribe': cardinality.Cardinality.STREAM_STREAM,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'openconfig.OpenConfig', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
